fetch: 0
debug: 1
compress_tar: gz
output_dir: "out/[% project %]"

pkg_type: build

var:
  build_osname: '[% c("lsb_release/id") %]-[% c("lsb_release/release") %]'
  build_id: '[% sha256(c("var/build_id_txt")).substr(0, 6) %]'
  build_id_txt: |
    [% c("version") %]
    [% IF c("git_hash"); GET c("abbrev"); END; %]
    [% c("lsb_release/id") %]
    [% c("lsb_release/release") %]
    [% c("lsb_release/codename") %]
    input_files:
    [%
       files = [];
       FOREACH file IN c("input_files_by_name").keys.sort;
         CALL files.push(c("input_files_by_name/" _ file));
       END;
       SET projdir = c('projects_dir');
       FOREACH file IN files.sort;
         GET file _ "\n";
         SET path = projdir _ '/' _ project _ '/' _ file;
         GET sha256file(path) _ "\n";
       END;
       %]
    build:
    [% c("build", { filename => 'f', output_dir => '/out' }) %]

targets:
  notarget: linux-x86_64
  linux-x86_64:
    arch: x86_64
    var:
      linux: 1
      osname: linux-x86_64
  linux-i686:
    arch: i686
    var:
      linux: 1
      osname: linux-i686
      configure_opt: '--host=i686-linux-gnu CFLAGS=-m32 CXXFLAGS=-m32 LDFLAGS=-m32'
  windows-i686:
    arch: i686
    var:
      windows: 1
      osname: windows-i686
  osx-x86_64:
    arch: x86_64
    var:
      osx: 1
      osname: osx-x86_64


docker_image: '[% pc("docker-image", "docker_save_image") %]'
