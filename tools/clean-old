#!/usr/bin/perl -w
use strict;
use Cwd qw(getcwd);
use IO::CaptureOutput qw(capture_exec);
use FindBin;

my $rbm = "$FindBin::Bin/../rbm/rbm";
my $projects_dir = "$FindBin::Bin/../projects";
my @targets = qw(linux-x86_64 linux-i686 windows-i686 osx-x86_64);
my @sig_ext = qw(.sig .gpg .asc);
my $docker_image_prefix = docker_image_prefix();

sub clean_project_build_files {
    my ($project) = @_;
    my $old_cwd = getcwd;
    chdir "$FindBin::Bin/../out/$project";
    my @files = grep { -f $_ } glob '*';
    chdir $old_cwd;
    my %keep_files;
    foreach my $target (@targets) {
        my ($out, $err, $success) = capture_exec($rbm,
            'showconf', $project, 'filename', "--target=$target");
        return unless $success;
        chomp $out;
        $keep_files{$out} = 1;
        ($out, $err, $success) = capture_exec($rbm,
            'showconf', $project, 'var/input_files_list', "--target=$target");
        next unless $success;
        my @input_files = split("\n", $out);
        foreach my $input_file (@input_files) {
            chomp $input_file;
            next unless $input_file;
            $keep_files{$input_file} = 1;
            foreach my $ext (qw(sig gpg asc)) {
                $keep_files{"$input_file.$ext"} = 1;
            }
        }
    }
    foreach my $file (@files) {
        next if $keep_files{$file};
        print "Removing $file\n";
        unlink "$FindBin::Bin/../out/$project/$file";
    }
}

sub clean_build_files {
    chdir $projects_dir;
    foreach my $project (glob '*') {
        next if $project eq 'docker-image';
        next unless -f "$project/config";
        print "Cleaning project: $project\n";
        clean_project_build_files($project);
    }
}

sub docker_image_prefix {
    my ($out, $err, $success) = capture_exec($rbm, 'showconf', 'docker-image',
                                              'docker_image_prefix');
    die "Cannot get docker image prefix" unless $success;
    chomp $out;
    return $out;
}

sub remove_docker_image {
    my ($image_name) = @_;
    my $image = "$docker_image_prefix:$image_name";
    print "Removing docker image $image\n";
    my ($out, $err, $success) = capture_exec('docker', 'rmi', '-f', $image);
    if (!$success) {
        print STDERR "Error removing docker image $image\n";
        return;
    }
    unlink "$FindBin::Bin/../out/docker-image/$image_name";
}

sub clean_docker_images {
    chdir "$FindBin::Bin/../out/docker-image" or return;
    print "Cleaning docker images\n";
    my @docker_files = grep { -f $_ } glob '*';
    my %keep_docker_files;
    chdir $projects_dir;
    foreach my $project (glob '*') {
        next if $project eq 'docker-image';
        next unless -f "$project/config";
        foreach my $target (@targets) {
            my ($out, $err, $success) = capture_exec($rbm, 'showconf', $project,
                'remote_docker', "--target=$target");
            next unless $success;
            chomp $out;
            next unless $out;
            ($out, $err, $success) = capture_exec($rbm, 'showconf', $project,
                'docker_image', "--target=$target");
            next unless $success;
            chomp $out;
            my (undef, $image_file) = split(':', $out);
            $keep_docker_files{$image_file} = 1;
        }
    }
    foreach my $docker_file (@docker_files) {
        next if $keep_docker_files{$docker_file};
        remove_docker_image($docker_file);
    }
}

clean_build_files;
clean_docker_images;
