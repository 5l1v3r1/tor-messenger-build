diff --git a/chat/locales/en-US/xmpp.properties b/chat/locales/en-US/xmpp.properties
--- a/chat/locales/en-US/xmpp.properties
+++ b/chat/locales/en-US/xmpp.properties
@@ -13,6 +13,9 @@
 connection.authenticating=Authenticating
 connection.gettingResource=Getting resource
 connection.downloadingRoster=Downloading contact list
+connection.registering=Registering new account
+connection.gettingRegistration=Getting registration form
+connection.onRegistrationSuccess=Account registered
 
 # LOCALIZATION NOTE (connection.error.*)
 #   These will show in the account manager if an error occurs during the
@@ -33,6 +36,8 @@
 connection.error.authenticationFailure=Authentication failure
 connection.error.notAuthorized=Not authorized (Did you enter the wrong password?)
 connection.error.failedToGetAResource=Failed to get a resource
+connection.error.noRegistrationSupport=The server does not support in-band registration
+connection.error.registrationCancel=Registration canceled
 
 
 # LOCALIZATION NOTE (conversation.error.notDelivered):
diff --git a/chat/protocols/xmpp/xmpp-session.jsm b/chat/protocols/xmpp/xmpp-session.jsm
--- a/chat/protocols/xmpp/xmpp-session.jsm
+++ b/chat/protocols/xmpp/xmpp-session.jsm
@@ -11,6 +11,8 @@
 Cu.import("resource:///modules/xmpp-xml.jsm");
 Cu.import("resource:///modules/xmpp-authmechs.jsm");
 
+const registerWindow = "chrome://instantbird/content/xmppRegister.xul";
+
 XPCOMUtils.defineLazyGetter(this, "_", () =>
   l10nHelper("chrome://chat/locale/xmpp.properties")
 );
@@ -68,6 +70,7 @@
                               Stanza.node("ping", Stanza.NS.ping)),
                     this.cancelDisconnectTimer, this);
   },
+  nodes: {},
   _lastReceiveTime: 0,
   _lastSendTime: 0,
   checkPingTimer(aJustSentSomething = false) {
@@ -271,6 +274,69 @@
       this.onXmppStanza = this.stanzaListeners.startAuth;
       this.onXmppStanza(aStanza);
     },
+    onRegisterResponse: function(aStanza) {
+      let error = this._account.parseError(aStanza);
+      if (error) {
+        this.onError(null, aStanza.getElement(["error"]).innerText);
+        return;
+      }
+      if (aStanza.attributes["type"] == "result") {
+        this._account.reportConnecting(_("connection.onRegistrationSuccess"));
+        this._account.prefs.setBoolPref("register", false);
+        this._account.connect();
+      }
+      return;
+    },
+    startRegister: function(aStanza) {
+      // Some servers do not support in-band registration. In that case,
+      // complain and quit the registration process.
+      let error = this._account.parseError(aStanza);
+      if (error) {
+        this.onError(null, _("connection.error.noRegistrationSupport"));
+        return;
+      }
+
+      // Clear the existing elements from previous registrations.
+      for (let elem in this.nodes)
+        delete this.nodes[elem];
+
+      this._account.reportConnecting(_("connection.gettingRegistration"));
+      let registerStanza = aStanza.getChildrenByNS(Stanza.NS.register)[0];
+      // If we get registration data, show the form, else quit.
+      if (registerStanza.getElement(["x"])) {
+        this.nodes["username"] = this._jid.node;
+        registerStanza.wrappedJSObject = registerStanza;
+        let ww = Cc["@mozilla.org/embedcomp/window-watcher;1"]
+                   .getService(Ci.nsIWindowWatcher);
+        let win = ww.openWindow(null, registerWindow, "",
+                                "centerscreen,chrome,modal,minimizable=no", registerStanza);
+      } else {
+        this.onError(null, _("connection.error.noRegistrationSupport"));
+        return;
+      }
+
+      // If the user cancelled the form, we should stop the registration.
+      if (this.nodes["cancel"]) {
+        this.onError(null, _("connection.error.registrationCancel"));
+        return;
+      }
+
+      let xml = '<?xml version="1.0"?>';
+      let fieldNodes = [];
+      for (let key in this.nodes) {
+        let node = Stanza.node("field", null, {"var": key});
+        let childNode = Stanza.node("value");
+        childNode.addText(this.nodes[key]);
+        node.addChild(childNode);
+        fieldNodes.push(node);
+      }
+      let registerResponse = Stanza.iq("set", null, this._domain,
+                                       Stanza.node("query", Stanza.NS.register, null,
+                                                   Stanza.node("x", Stanza.NS.xdata,
+                                                               {"type": "submit"}, fieldNodes)));
+      this.sendStanza(registerResponse);
+      this.onXmppStanza = this.stanzaListeners.onRegisterResponse;
+    },
     startTLS: function(aStanza) {
       if (aStanza.localName != "proceed") {
         this._networkError(_("connection.error.failedToStartTLS"));
@@ -283,6 +349,18 @@
       this.onXmppStanza = this.stanzaListeners.startAuth;
     },
     startAuth: function(aStanza) {
+      // If the user has requested for a new account, we try to perform
+      // in-band registration first (if the server supports it) and then
+      // we authenticate.
+      if (this._account.getBool("register")) {
+        this._account.reportConnecting(_("connection.registering"));
+        let register = Stanza.iq("get", null, null,
+                                 Stanza.node("query", Stanza.NS.register));
+        this.sendStanza(register);
+        this.onXmppStanza = this.stanzaListeners.startRegister;
+        return;
+      }
+
       if (aStanza.localName != "features") {
         this.ERROR("Unexpected stanza " + aStanza.localName + ", expected 'features'");
         this._networkError(_("connection.error.incorrectResponse"));
diff --git a/im/content/accountWizard.js b/im/content/accountWizard.js
--- a/im/content/accountWizard.js
+++ b/im/content/accountWizard.js
@@ -106,16 +106,22 @@ var accountWizard = {
   },
 
   showUsernamePage: function aw_showUsernamePage() {
     let proto = this.proto.id;
     if ("userNameBoxes" in this && this.userNameProto == proto) {
       this.checkUsername();
       return;
     }
+    
+    if (this.proto.id == "prpl-jabber") {
+      document.getElementById("registerXMPP").hidden = false;
+    } else {
+      document.getElementById("registerXMPP").hidden = true;
+    }
 
     let bundle = document.getElementById("accountsBundle");
     let usernameInfo;
     let emptyText = this.proto.usernameEmptyText;
     if (emptyText) {
       usernameInfo =
         bundle.getFormattedString("accountUsernameInfoWithDescription",
                                   [emptyText, this.proto.name]);
@@ -412,16 +418,18 @@ var accountWizard = {
   createAccount: function aw_createAccount() {
     let acc = Services.accounts.createAccount(this.username, this.proto.id);
     if (!this.proto.noPassword && this.password)
       acc.password = this.password;
     if (this.alias)
       acc.alias = this.alias;
     //FIXME: newMailNotification
 
+    acc.setBool("register", document.getElementById("registerXMPP").checked);
+
     for (let i = 0; i < this.prefs.length; ++i) {
       let option = this.prefs[i];
       let opt = option.opt;
       switch(opt.type) {
       case opt.typeBool:
         acc.setBool(option.name, option.value);
         break;
       case opt.typeInt:
diff --git a/im/content/accountWizard.xul b/im/content/accountWizard.xul
--- a/im/content/accountWizard.xul
+++ b/im/content/accountWizard.xul
@@ -60,16 +60,17 @@
               onpageshow="accountWizard.showUsernamePage();"
               onpagehide="accountWizard.hideUsernamePage();"
               onpagerewound="return accountWizard.rewindFromUsernamePage();">
     <description id="usernameInfo"/>
     <separator/>
     <vbox id="userNameBox"/>
     <separator/>
     <description id="duplicateAccount" hidden="true">&accountUsernameDuplicate.label;</description>
+    <checkbox id="registerXMPP" label="&registerXMPP.label;" hidden="true" />
   </wizardpage>
 
   <wizardpage id="accountpassword" pageid="accountpassword" next="accountadvanced"
               label="&accountPasswordTitle.label;">
     <description>&accountPasswordInfo.label;</description>
     <separator/>
     <hbox id="passwordBox" align="baseline">
       <label value="&accountPasswordField.label;" control="password" id="passwordLabel"/>
diff --git a/im/content/jar.mn b/im/content/jar.mn
--- a/im/content/jar.mn
+++ b/im/content/jar.mn
@@ -56,16 +56,18 @@ instantbird.jar:
 	content/instantbird/proxies.css
 	content/instantbird/proxy.xml
 *	content/instantbird/tabbrowser.xml
 	content/instantbird/tabbrowser.css
 	content/instantbird/utilities.js
 *	content/instantbird/viewlog.xul
 	content/instantbird/viewlog.js
 	content/instantbird/viewlog.css
+*   content/instantbird/xmppRegister.xul
+    content/instantbird/xmppRegister.js
 #ifdef XP_MACOSX
 *	content/instantbird/hiddenWindow.xul
 	content/instantbird/menus-mac.xul
 	content/instantbird/macgestures.js
 *	content/instantbird/jsConsoleOverlay.xul
 *	content/instantbird/softwareUpdateOverlay.xul
 #elifdef XP_WIN
 	content/instantbird/menus-win.xul
diff --git a/im/locales/en-US/chrome/instantbird/accountWizard.dtd b/im/locales/en-US/chrome/instantbird/accountWizard.dtd
--- a/im/locales/en-US/chrome/instantbird/accountWizard.dtd
+++ b/im/locales/en-US/chrome/instantbird/accountWizard.dtd
@@ -26,8 +26,10 @@
 <!ENTITY accountAliasInfo.label       "This will only be displayed in your conversations when you talk, remote buddies won't see it.">
 <!ENTITY accountProxySettings.caption "Proxy Settings">
 <!ENTITY accountProxySettings.change.label     "Changeâ€¦">
 <!ENTITY accountProxySettings.change.accessKey "C">
 
 <!ENTITY accountSummaryTitle.label   "Summary">
 <!ENTITY accountSummaryInfo.label    "A summary of the information you entered is displayed below. Please check it before the account is created.">
 <!ENTITY accountSummary.connectAutomatically.label "Connect this account automatically.">
+
+<!ENTITY registerXMPP.label "Create this new account on the server">
