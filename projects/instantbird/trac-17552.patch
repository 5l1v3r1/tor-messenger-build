# HG changeset patch
# User Arlo Breault <arlolra@gmail.com>
# Date 1446953889 28800
#      Sat Nov 07 19:38:09 2015 -0800
# Node ID a42c96a62dee7a73910de738a9809d8247aede8c
# Parent  492c769c46c9ea9e54fab00d6f0310afd100885a
Ensure isMuc when attempting a subject change

diff --git a/chat/protocols/xmpp/xmpp.jsm b/chat/protocols/xmpp/xmpp.jsm
--- a/chat/protocols/xmpp/xmpp.jsm
+++ b/chat/protocols/xmpp/xmpp.jsm
@@ -1343,16 +1343,17 @@ const XMPPAccountPrototype = {
 
       return null;
   },
 
   /* Called when a message stanza is received */
   onMessageStanza: function(aStanza) {
     let from = aStanza.attributes["from"];
     let norm = this.normalize(from);
+    let isMuc = this._mucs.has(norm);
 
     let type = aStanza.attributes["type"];
     let body;
     let b = aStanza.getElement(["body"]);
     if (b) {
       // If there's a <body> child we have more than just typing notifications.
       // Prefer HTML (in <html><body>) and use plain text (<body>) as fallback.
       let htmlBody = aStanza.getElement(["html", "body"]);
@@ -1362,17 +1363,21 @@ const XMPPAccountPrototype = {
         // Even if the message is in plain text, the prplIMessage
         // should contain a string that's correctly escaped for
         // insertion in an HTML document.
         body = TXTToHTML(b.innerText);
       }
     }
 
     let subject = aStanza.getElement(["subject"]);
-    if (subject) {
+    // Ignore subject when !isMuc. We're being permissive about subject changes
+    // in the comment below, so we need to be careful about where that makes
+    // sense. Psi+'s OTR plugin includes a subject and body in its message
+    // stanzas.
+    if (subject && isMuc) {
       // XEP-0045 (7.2.16): Check for a subject element in the stanza and update
       // the topic if it exists.
       // We are breaking the spec because only a message that contains a
       // <subject/> but no <body/> element shall be considered a subject change
       // for MUC, but we ignore that to be compatible with ejabberd versions
       // before 15.06.
       let muc = this._mucs.get(norm);
       let nick = this._parseJID(from).resource;
@@ -1386,18 +1391,18 @@ const XMPPAccountPrototype = {
       let delay = aStanza.getElement(["delay"]);
       if (delay && delay.uri == Stanza.NS.delay) {
         if (delay.attributes["stamp"])
           date = new Date(delay.attributes["stamp"]);
       }
       if (date && isNaN(date))
         date = undefined;
       if (type == "groupchat" ||
-          (type == "error" && this._mucs.has(norm) && !this._conv.has(from))) {
-        if (!this._mucs.has(norm)) {
+          (type == "error" && isMuc && !this._conv.has(from))) {
+        if (!isMuc) {
           this.WARN("Received a groupchat message for unknown MUC " + norm);
           return;
         }
         let muc = this._mucs.get(norm);
         muc.incomingMessage(body, aStanza, date);
         return;
       }
 
@@ -1454,17 +1459,17 @@ const XMPPAccountPrototype = {
     if (state) {
       this.DEBUG(state);
       if (state == "composing")
         typingState = Ci.prplIConvIM.TYPING;
       else if (state == "paused")
         typingState = Ci.prplIConvIM.TYPED;
     }
     let convName = norm;
-    if (this._mucs.has(norm))
+    if (isMuc)
       convName = from;
     let conv = this._conv.get(convName);
     if (!conv)
       return;
     conv.updateTyping(typingState, conv.shortName);
     conv.supportChatStateNotifications = !!state;
   },
 
