
# HG changeset patch
# User Jacek Caban <jacek@codeweavers.com>
# Date 1460457438 -7200
# Node ID a2d94f934b2a733fa09e8f1097ee6fe07d7a2ad1
# Parent  474f2f3c105915264882ba0f9733e7d1ee986c95
Bug 1263653 - Fixed TSFTextStore.h compilation with mingw. r=masayuki

diff --git a/widget/windows/TSFTextStore.cpp b/widget/windows/TSFTextStore.cpp
--- a/widget/windows/TSFTextStore.cpp
+++ b/widget/windows/TSFTextStore.cpp
@@ -5299,17 +5299,17 @@ TSFTextStore::SetInputContext(nsWindowBa
           aWidget, GetIMEEnabledName(aContext.mIMEState.mEnabled),
           GetFocusChangeName(aAction.mFocusChange), sEnabledTextStore.get(),
           GetBoolName(ThinksHavingFocus())));
 
   NS_ENSURE_TRUE_VOID(IsInTSFMode());
 
   if (aAction.mFocusChange != InputContextAction::FOCUS_NOT_CHANGED) {
     if (sEnabledTextStore) {
-      RefPtr<TSFTextStore> textStore = sEnabledTextStore;
+      RefPtr<TSFTextStore> textStore(sEnabledTextStore);
       textStore->SetInputScope(aContext.mHTMLInputType,
                                aContext.mHTMLInputInputmode);
     }
     return;
   }
 
   // If focus isn't actually changed but the enabled state is changed,
   // emulate the focus move.
diff --git a/widget/windows/TSFTextStore.h b/widget/windows/TSFTextStore.h
--- a/widget/windows/TSFTextStore.h
+++ b/widget/windows/TSFTextStore.h
@@ -114,74 +114,74 @@ public:
   static bool     GetIMEOpenState(void);
 
   static void     CommitComposition(bool aDiscard)
   {
     NS_ASSERTION(IsInTSFMode(), "Not in TSF mode, shouldn't be called");
     if (!sEnabledTextStore) {
       return;
     }
-    RefPtr<TSFTextStore> textStore = sEnabledTextStore;
+    RefPtr<TSFTextStore> textStore(sEnabledTextStore);
     textStore->CommitCompositionInternal(aDiscard);
   }
 
   static void SetInputContext(nsWindowBase* aWidget,
                               const InputContext& aContext,
                               const InputContextAction& aAction);
 
   static nsresult OnFocusChange(bool aGotFocus,
                                 nsWindowBase* aFocusedWidget,
                                 const InputContext& aContext);
   static nsresult OnTextChange(const IMENotification& aIMENotification)
   {
     NS_ASSERTION(IsInTSFMode(), "Not in TSF mode, shouldn't be called");
     if (!sEnabledTextStore) {
       return NS_OK;
     }
-    RefPtr<TSFTextStore> textStore = sEnabledTextStore;
+    RefPtr<TSFTextStore> textStore(sEnabledTextStore);
     return textStore->OnTextChangeInternal(aIMENotification);
   }
 
   static nsresult OnSelectionChange(const IMENotification& aIMENotification)
   {
     NS_ASSERTION(IsInTSFMode(), "Not in TSF mode, shouldn't be called");
     if (!sEnabledTextStore) {
       return NS_OK;
     }
-    RefPtr<TSFTextStore> textStore = sEnabledTextStore;
+    RefPtr<TSFTextStore> textStore(sEnabledTextStore);
     return textStore->OnSelectionChangeInternal(aIMENotification);
   }
 
   static nsresult OnLayoutChange()
   {
     NS_ASSERTION(IsInTSFMode(), "Not in TSF mode, shouldn't be called");
     if (!sEnabledTextStore) {
       return NS_OK;
     }
-    RefPtr<TSFTextStore> textStore = sEnabledTextStore;
+    RefPtr<TSFTextStore> textStore(sEnabledTextStore);
     return textStore->OnLayoutChangeInternal();
   }
 
   static nsresult OnUpdateComposition()
   {
     NS_ASSERTION(IsInTSFMode(), "Not in TSF mode, shouldn't be called");
     if (!sEnabledTextStore) {
       return NS_OK;
     }
-    RefPtr<TSFTextStore> textStore = sEnabledTextStore;
+    RefPtr<TSFTextStore> textStore(sEnabledTextStore);
     return textStore->OnUpdateCompositionInternal();
   }
 
   static nsresult OnMouseButtonEvent(const IMENotification& aIMENotification)
   {
     NS_ASSERTION(IsInTSFMode(), "Not in TSF mode, shouldn't be called");
     if (!sEnabledTextStore) {
       return NS_OK;
     }
-    RefPtr<TSFTextStore> textStore = sEnabledTextStore;
+    RefPtr<TSFTextStore> textStore(sEnabledTextStore);
     return textStore->OnMouseButtonEventInternal(aIMENotification);
   }
 
   static nsIMEUpdatePreference GetIMEUpdatePreference();
 
   // Returns the address of the pointer so that the TSF automatic test can
   // replace the system object with a custom implementation for testing.
   // XXX TSF doesn't work now.  Should we remove it?

